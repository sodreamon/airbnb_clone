강의 = 9.1

### rooms.management.commands.loveyou.py

(web Writing custom django-admin commands)
fake user
app(아무앱).management.__init__.py 만듬
management.command 만듬
command.__init__.py만듬
command.loveyou.py





def __init__(): 속한 class를 거치면 무조건 실행

super() 부모 class에 접근할 수 있게 해줌
super().{method}() 로 사용
부모 class와 자식 class에 같은 이름의 method가 있을 경우 둘다 실행

django console에서 print했을 때 string으로 나와도 print(type())으로 확인할 수 있음
경로확인<예) rooms.admin.PhotoAdmin - print(obj.file.path)>
위 예에서 file내의 내용물은 print(dir(obj.file)) 확인가능

obj
admin def ~ (self, obj)에서 사용되는 obj는 {app}.{model}.objects를 의미함

admin과 프론트앤드 모두에서 사용하려면 각 models에 생성(함수 포함)(reviews.models 참조),
admin에서만 사용하려면 각 admin에 생성(함수 포함)



QuerySet 는 데이터베이스로 부터 온 장고 objects
users.User 를 rooms.Room 에 ForeignKey해서 가져온경우
<콘솔> users.models.User > room_set 이라고 뜸
set 은 ForeignKey 의 대상이 element를 얻어내는 방법임
room_set을 다른 이름으로 바꾸려면 related_name="" 사용(models.{class})에서 <예시 rooms.models.Room 확인>
related_name은 Room에서 User를 끌어 썼으면 User.objects.{related_name}이 됨
{username} = User.objects.get(username='{username}') 식으로 지정해줘야 username사용가능

all()는 web django document. QuerySet API reference에 있음

<console><예시>
>python manage.py shell
>from users.models import User
>mute = User.objects.get(username='mute')
>mute.rooms.all()

<console><예시>
>>> from rooms.models import Room
>>> room = Room.objects.get(id=1)
# >>> room = Room.objects.get(pk=1) 위와 같은 뜻
>>> room.amenities.all()
<QuerySet [<Amenity: shawer>, <Amenity: WiFi>, <Amenity: washer>]>
위는 ManyToManyField의 경우를 보여줌

<console><예시><filter()>
>>> startswith = User.objects.filter(username__startswith='mu') 
>>> print(startswith)
<QuerySet [<User: mute>]>
앞 글자로 찾기

"".join()
()안의 내용에서 순수하게 string만 을 출력한다. 출력되는 내용들 사이의 구분이 없어짐
내용들 사이를 띄우기 위해 " ".join() 식으로 ""안에 구분할 수 있는 것을 넣어줌




시간대 변경
setting.py > TIME_ZONE 'Asia/Seoul'





서버구동

python manage.py runserver






admin서버

python manage.py migrate






admin superuser

python manage.py createsuperuser






###settings.py
auth user custom

AUTH_USER_MODEL

만든 앱들을 settings.py에 등록해줘야 장고가 인식함
"users.apps.UsersConfig"

<----사진 경로 만들기---->
web document. setting. MEDIA_ROOT (setting.py에 입력)
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")
위 처럼 uploads라는 폴더를 만들어주고 미디어를 업로드 시킬 수 있음
.gitignore에 uploads/ 라고 추가해주는게 좋음
avatar = models.ImageField(upload_to="avatars", blank=True)
위 처럼 ImageField 또는 FileField에 upload_to=''추가(upload 폴더에 ''폴더를 만들어 image or file을 넣어준다는 뜻

MEDIA_URL = '/media/'
image나 file로 연결되는 media라는 절대 경로를 만듬
http://127.0.0.1:8000/media/room_photos/%EC%A6%9... 라는 형식으로 url변경
<----끝---->






### url.py
<----사진 경로 만들기---->
from django.conf import settings
settings.py를 연결할 때는 명확하게 해야함

from django.conf.urls.static import static
위는 static파일 import
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
debug 모드일 때 MEDIA_URL과 MEDIA_ROOT를 연결하고 urlpatterns에 해당 static을 추가해준다는 뜻
<----끝---->




###users.models(직접만듬)
custom user model 만들기
model field column

비어있을 경우 (default='') 또는 (null = True) 입력
선택창 -> charField에 choices 만들기





###users.admin(직접만듬)
admin 정보창 fieldsets 변경
fieldsets = (("Banana", {"fields": ("avatar", "gender", "bio",)}),)
fieldsets을 지정하면 이전에 있던 field 사라짐
fieldsets = UserAdmin.fieldsets + (
        ("Banana", {"fields": ("avatar", "gender", "bio",)}),
    )
라고 해야 원래있던 fieldsets(이건 디폴트 fieldsets)를 포함시킴

list_display에 booleanField를 넣으려면 is_superuser, is_active 처럼 is_를 붙여줘야한다.






###core.models(직접만듬)
각 app들의 models에서 사용할 field들을 미리 만들어놓음
데이터 베이스에 저장하지 않기를 바라는 경우
class Meta:
        abstract = True 사용
DateTimeField는 auto_now_add(model이 생성된 날짜 구하기), auto_now(새로운 날짜로 업데이트) 기능 있음(자동 날짜 시간 입력)
models.DateTimeField(auto_now_add=True)





###rooms.models(직접만듬)
host라는 model은 users의 model을 가져왔음
users를 import해야함
host = models.ForeignKey(user_models.User, on_delete=models.CASCADE)
ForeignKey("users.User" 라고 쓰면 users를 import하지 않아도 됨
on_delete=models.CASACADE는 user_models.User를 삭제하면 폭포처럼 자식 모델들도 함께 없어짐(자식모델을 놔두는 PROTECT도 있음)
room_type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True) 
ForeignKey는 다른 앱의 model을 이어주는 함수
ForeingKey는 일대다 관계, 일 = user 다 = room (user는 여러 room을 가질 수 있음, room은 여러 user를 가질 수 없음) user는 아빠모델 room은 자식모델

특정 값을 str으로 변환하여 제목 등등에 띄어주려면
def __str__(self):
        return self.name 사용 name은 rooms의 모델 name을 사용함

여러 선택지를 만들어서 카테고리 모델을 넣어야하는 경우 다대다 ManyToManyField를 사용
(models.RoomType)의 내용을 추가하려면 rooms.admin에 추가해줘야함
@admin.register(models.RoomType)
class ItemAdmin(admin.modelAdmin):
    pass

django에서 model클래스 뒤에 자동으로 s 붙히는 걸 바꾸려면 
django document.model meta options.verbose name plural 사용
django에서 model클래스가 camel식으로 표현되는 걸 바꾸려면
django document.model meta options.verbose name 사용

model 클래스 내의 항목 순서 (created, name) 등을 정하려면
django document.model meta options.ordering 사용

def total_rating(self):
        all_reviews = self.reviews.all()
        all_ratings = 0
        for review in all_reviews:
            all_ratings += review.rating_average()
        return all_ratings / len(all_reviews)
는 Room에 related_name으로 reviews가 있기 때문에 reviews.models.Review를 가져왔고 Review에 속한 rating_average()를 가져왔다.
all_rating을 0으로 두고 별점을 더해 두었고 len(all_reviews)리뷰 갯수를 구해 나누어 주었다.

<----save 인터셉트---->
def save(self, *args, **kwargs):
(web document. Models. Overriding predefined model methods)

def save(self, *args, **kwargs):
        do_something()
        super().save(*args, **kwargs)  # Call the "real" save() method.
        do_something_else()

def save(self, *args, **kwargs):
        self.city = str.capitalize(self.city)
        super().save(*args, **kwargs)
city에 입력된 str을 capitalize(첫글자 대문자) 적용시킨 것

capitalize() 첫글자 대문자
lower() 전체 소문자
upper() 전체 대문자
<----끝---->







####
rooms.admin
admin 페이지 형식을 추가하거나 수정하려면
web django document.the django admin site. ModelAdmin options

admin 내용을 print 하려면 list_display 등을 사용
filter를 적용하려면 

대소문자 구분 startswith  <->  istartswith

option에서 ForeignField는 __를 사용한다
search_fields = ("=city", "host__username")

filter_horizontal = ()
ManyToManyField에서 사용
ManyToManyField 안의 내용들을 넣고 빼고 검색, 추가 할 수 있도록 만듬

'classes': ('collapse',),
fieldset에서 사용, {}안에 'fields': 앞에 붙여준다
해당 fieldset을 접었다 펼 수 있는 기능 부여

ordering = ('') 
클래스 내 print 순서 지정

ManyToManyField를 list_display에 포함 시키기 위해서 함수를 줘야함.
def count_amenities(self, obj):
        return 'Potato'
count_amenities.short_description = 'hello sexy'
(list_display 에 count_ameities 가 있어야함)
    def count_amenities(self, obj):
        return obj.amenities.count()

@admin.register(models.RoomType, models.Facility, models.Amenity, models.HouseRule)
class ItemAdmin(admin.ModelAdmin):
이 경우 list_display를 추가하면 tuple 안의 4개 모두 list_display가 생성된다.
예시에서 4 모두 related_name='rooms'를 가지고 있기 때문에 함수 used_by(self, obj) return obj.rooms.count()를 할 수 있었다.

from django.utils.html import mark_safe
django admin에 html 정보를 가져올 수 있게 한다. django security 기능을 일부 끄기 위해
def get_thumbnail(self, obj):
        return mark_safe(f'<img width=50px src="{obj.file.url}" />')
위 형식으로 mark_safe를 사용하고 rooms.Photo를 thumbnail로 나타낸것
직접 사진 url을 img로 가져왔기 때문에 사진이 print됨

raw_id_fields = ('host',)
()안의 host 모델의 id를 admin 창 선택창으로 만들어주고 검색 기능 추가
위 경우 User의 list_filter도 가져온다
일대다 관계에서 유용, amenities같은 다대다 관계에서 쓰기 힘듬

class PhotoInline(admin.TabularInline):
    model = models.Photo
PhotoAdmin을 다른 Admin에 사용하기 위해 만듬
(web document InlineModelAdmin objects )
위 경우 RoomAdmin에 inlines = (PhotoInline,) 추가 해줌
결과는 RoomAdmin에 Photo 라는 fieldset을 만들어줌
지정된 Room에서 Photo를 추가하기 때문에 Photo를 추가할 때 따로 Room object를 지정해줄 필요가 없음
StackedInline, TabularInline 둘 중 하나 선택가능(생김새가 다름)
마찬가지로 User에서도 Room을 가질 수 있음(user.admin에 rooms.models를 import해야함)
이런 Inline관계는 ForeignKey가 있어야 가능함
<class 'users.admin.PhotoUserInline'>: (admin.E202) 'rooms.Photo' has no ForeignKey to 'users.User'.
ForeignKey가 없을경우 이런 에러가 뜸(users.User와 rooms.Photo는 ForeignKey가 없음)

<----admin save 인터셉트---->
(web document. The Django admin site. ModelAdmin methods)
def save_model(self, request, obj, form, change):
        obj.user = request.user
        super().save_model(request, obj, form, change)








### reviews.models

def __str__(self):
        return
에서 ForeignKey가 지정된 경우
 room = models.ForeignKey("rooms.Room" 등등
rooms.Room에 들어있는 object를 return 가능하다
return self.room.country

return f"{self.review} - {self.room}"
review - room 의 방식으로 프린트됨

return self.room.host.username은 return self.user와 같이 프린트 됨.

def rating_average(self):에서 연산 함수는 가급적 object 만들어주고 object를 return 하는게 이쁨
float값(소수값)을 반올림 하려면 round 함수 사용
web django document. Database Functions 참조
rating_average.short_description = 'Avg.'를 이용해 rating_average가 보여지는 이름을 대신할 수 있다.(자동 대문자화 됨)







### reservation.models

날짜 및 시간 정보를 가져오려면
from django.utils import timezone
now = timezone.now()
아래는 now가 범위내에 해당할 경우 True가 된다.
return now > self.check_in and now < self.check_out
in_progress.boolean = True
boolean = True함수는 장고 내에서 O X 이모지를 만들어준다.





### list.admin

search_fields = ('')
''안의 내용을 검색 ^(startswith), = 등 사용가능






